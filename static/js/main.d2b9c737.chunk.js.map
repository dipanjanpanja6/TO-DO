{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","componentDidMount","localStorage","getItem","setState","data","JSON","parse","console","log","handleOpen","open","handleClose","error","task","handleChange","e","target","id","value","handleAdd","state","push","setItem","stringify","handleShuffle","length","v","Math","floor","random","alert","handleClear","removeItem","listCheck","classes","this","props","lists","map","l","ListItem","dense","button","key","ListItemIcon","Checkbox","edge","checked","disableRipple","ListItemText","primary","AppBar","position","Toolbar","Typography","className","title","display","variant","IconButton","color","onClick","Paper","Grid","List","Dialog","keepMounted","onClose","aria-labelledby","aria-describedby","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","multiline","onChange","DialogActions","Button","Component","withStyles","paper","heading","padding","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d2b9c737.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport {\n  Paper,\n  Typography,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Checkbox,\n  TextField,\n  AppBar,\n  Toolbar,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  Button,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\n\nconst style = {\n  paper: {\n    // padding:\"12px\"\n  },\n  heading: {\n    padding: \"12px\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      open: false,\n      listCheck: true,\n      task: \"\",\n      data: [],\n      error: false,\n    };\n  }\n  componentDidMount = () => {\n    if (localStorage.getItem(\"list\") === null) {\n    } else {\n      this.setState({\n        data: JSON.parse(localStorage.getItem(\"list\")),\n      });\n      // this.state.data.push(JSON.parse(localStorage.getItem('list')))\n    }\n    console.log(JSON.parse(localStorage.getItem(\"list\")));\n  };\n  handleOpen = () => {\n    this.setState({ open: true });\n  };\n  handleClose = () => {\n    this.setState({ open: false, error: false, task: \"\" });\n  };\n  handleChange = (e) => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  handleAdd = () => {\n    if (this.state.task === \"\") {\n      this.setState({ error: true });\n    } else {\n      this.state.data.push(this.state.task);\n      console.log(this.state.data);\n      localStorage.setItem(\"list\", JSON.stringify(this.state.data));\n      // localStorage[data]=new Array()\n      this.setState({ task: \"\" });\n      this.handleClose();\n    }\n  };\n  handleShuffle = () => {\n    if (this.state.data.length > 0) {\n      console.log(this.state.data.length);\n      let v = this.state.data[\n        Math.floor(Math.random() * this.state.data.length)\n      ];\n      alert(\"Do \" + v + \" first \");\n    } else {\n      alert(\"Add todo first\");\n    }\n  };\n  handleClear = () => {\n    localStorage.removeItem(\"list\");\n    this.setState({ data: [] });\n  };\n  render() {\n    const { classes } = this.props;\n    // const list = this.state.data;\n    const lists = this.state.data.map((l) => {\n      return (\n        <ListItem dense button key={Math.random() * 8}>\n          <ListItemIcon>\n            <Checkbox\n              edge=\"start\"\n              checked={this.state.listCheck}\n              disableRipple\n            />\n          </ListItemIcon>\n          <ListItemText id=\"1\" primary={l} />\n        </ListItem>\n      );\n    });\n    return (\n      <div>\n        <AppBar position=\"static\">\n          <Toolbar>\n            \n                <Typography className={classes.title} display=\"inline\" variant=\"h6\">\n                  Todo List\n                </Typography>\n              \n                <IconButton color=\"inherit\" onClick={this.handleOpen}>\n                  <AddIcon />\n                </IconButton>\n                <IconButton color=\"inherit\" onClick={this.handleShuffle}>\n                  <ShuffleIcon />\n                </IconButton>\n                <IconButton color=\"inherit\" onClick={this.handleClear}>\n                  <ClearIcon />\n                </IconButton>\n              \n          </Toolbar>\n        </AppBar>\n\n      <Paper className=\"paper\">\n        <Grid>\n          \n          <Grid>\n            <List>{lists}</List>\n          </Grid>\n        </Grid>\n\n        <Dialog\n          open={this.state.open}\n          keepMounted\n          onClose={this.handleClose}\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n        >\n          {/* <DialogTitle id=\"alert-dialog-slide-title\">{\"Use Google's location service?\"}</DialogTitle> */}\n          <DialogContent>\n            <DialogContentText>Add your todo item here.....</DialogContentText>\n            <TextField\n              error={this.state.error}\n              autoFocus\n              margin=\"dense\"\n              id=\"task\"\n              label=\"Task name\"\n              fullWidth\n              multiline\n              value={this.state.task}\n              onChange={this.handleChange}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleAdd} color=\"primary\">\n              Add\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Paper>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(style)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  \r\n    <App />\r\n  \r\n  ,document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}